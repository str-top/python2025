<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Дженга - Онлайн игра</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #8B4513, #A0522D);
            color: #fff;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            width: 100%;
        }
        
        h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        
        .subtitle {
            font-size: 1.2rem;
            margin-bottom: 20px;
            opacity: 0.9;
        }
        
        .game-area {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 40px;
            width: 100%;
        }
        
        .game-board {
            position: relative;
            width: 500px;
            height: 500px;
            background: #654321;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            perspective: 1000px;
            transform-style: preserve-3d;
        }
        
        .controls {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 10px;
            width: 300px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .controls h2 {
            margin-bottom: 15px;
            text-align: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.3);
            padding-bottom: 10px;
        }
        
        .button {
            background: #D2691E;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            margin: 10px 0;
            width: 100%;
            transition: background 0.3s;
        }
        
        .button:hover {
            background: #B8860B;
        }
        
        .stats {
            margin: 15px 0;
            font-size: 1.1rem;
        }
        
        .block {
            position: absolute;
            background: #DEB887;
            border: 1px solid #8B4513;
            transition: transform 0.3s, opacity 0.3s;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            font-weight: bold;
            color: #8B4513;
            user-select: none;
        }
        
        .block:hover {
            background: #F5DEB3;
        }
        
        .block.selected {
            background: #F4A460;
            transform: translateZ(20px);
        }
        
        .block.removed {
            opacity: 0.3;
            transform: scale(0.8);
            pointer-events: none;
        }
        
        .instructions {
            margin-top: 30px;
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 10px;
            width: 100%;
            max-width: 800px;
        }
        
        .instructions h2 {
            margin-bottom: 15px;
            text-align: center;
        }
        
        .instructions ol {
            margin-left: 20px;
            line-height: 1.6;
        }
        
        .instructions li {
            margin-bottom: 10px;
        }
        
        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 100;
            border-radius: 10px;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.5s;
        }
        
        .game-over.active {
            opacity: 1;
            pointer-events: all;
        }
        
        .game-over h2 {
            font-size: 3rem;
            margin-bottom: 20px;
            color: #FFD700;
        }
        
        .game-over p {
            font-size: 1.5rem;
            margin-bottom: 20px;
        }
        
        @media (max-width: 900px) {
            .game-area {
                flex-direction: column;
                align-items: center;
            }
            
            .game-board {
                width: 400px;
                height: 400px;
            }
            
            .controls {
                width: 400px;
            }
        }
        
        @media (max-width: 500px) {
            .game-board {
                width: 300px;
                height: 300px;
            }
            
            .controls {
                width: 300px;
            }
            
            h1 {
                font-size: 2.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>ДЖЕНГА</h1>
            <p class="subtitle">Классическая игра на ловкость и точность</p>
        </header>
        
        <div class="game-area">
            <div class="game-board" id="gameBoard">
                <div class="game-over" id="gameOver">
                    <h2>ИГРА ОКОНЧЕНА!</h2>
                    <p id="finalScore">Вы вытащили 0 блоков</p>
                    <button class="button" id="restartButton">Играть снова</button>
                </div>
            </div>
            
            <div class="controls">
                <h2>Управление</h2>
                <button class="button" id="startButton">Начать игру</button>
                <button class="button" id="resetButton">Сбросить игру</button>
                
                <div class="stats">
                    <p>Вытащено блоков: <span id="blocksRemoved">0</span></p>
                    <p>Текущий уровень: <span id="currentLevel">1</span></p>
                </div>
                
                <div class="instructions">
                    <h3>Как играть:</h3>
                    <ol>
                        <li>Кликните на блок, чтобы выбрать его</li>
                        <li>Перетащите блок мышкой, чтобы вытащить</li>
                        <li>Старайтесь не обрушить башню!</li>
                    </ol>
                </div>
            </div>
        </div>
        
        <div class="instructions">
            <h2>Правила игры Дженга</h2>
            <ol>
                <li>Игроки по очереди вытаскивают по одному блоку из любого уровня башни, кроме верхнего.</li>
                <li>Вытащенный блок помещается на верх башни.</li>
                <li>Игра продолжается до тех пор, пока башня не обрушится.</li>
                <li>Проигрывает тот, на чьём ходе башня рухнула.</li>
            </ol>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const gameBoard = document.getElementById('gameBoard');
            const startButton = document.getElementById('startButton');
            const resetButton = document.getElementById('resetButton');
            const restartButton = document.getElementById('restartButton');
            const blocksRemovedElement = document.getElementById('blocksRemoved');
            const currentLevelElement = document.getElementById('currentLevel');
            const gameOverScreen = document.getElementById('gameOver');
            const finalScoreElement = document.getElementById('finalScore');
            
            let blocks = [];
            let blocksRemoved = 0;
            let currentLevel = 1;
            let gameActive = false;
            let selectedBlock = null;
            let isDragging = false;
            let dragStartX, dragStartY;
            
            // Размеры блоков
            const BLOCK_WIDTH = 80;
            const BLOCK_HEIGHT = 20;
            const BLOCK_DEPTH = 40;
            
            // Начальные координаты башни
            const TOWER_X = 250;
            const TOWER_Y = 250;
            const TOWER_Z = 0;
            
            // Создание башни
            function createTower() {
                gameBoard.innerHTML = '';
                gameBoard.appendChild(gameOverScreen);
                blocks = [];
                
                // Создаем 18 уровней (как в классической Дженге)
                for (let level = 0; level < 18; level++) {
                    const isHorizontal = level % 2 === 0;
                    
                    for (let i = 0; i < 3; i++) {
                        const block = document.createElement('div');
                        block.className = 'block';
                        
                        // Устанавливаем размеры и позицию блока
                        if (isHorizontal) {
                            block.style.width = `${BLOCK_WIDTH}px`;
                            block.style.height = `${BLOCK_HEIGHT}px`;
                            block.style.left = `${TOWER_X - BLOCK_WIDTH/2 + i * BLOCK_WIDTH}px`;
                            block.style.top = `${TOWER_Y - BLOCK_HEIGHT/2}px`;
                        } else {
                            block.style.width = `${BLOCK_DEPTH}px`;
                            block.style.height = `${BLOCK_HEIGHT}px`;
                            block.style.left = `${TOWER_X - BLOCK_DEPTH/2}px`;
                            block.style.top = `${TOWER_Y - BLOCK_HEIGHT/2 + (i-1) * BLOCK_DEPTH}px`;
                        }
                        
                        // Позиционируем по Z-оси (высота)
                        const zPosition = level * BLOCK_HEIGHT;
                        block.style.transform = `translateZ(${zPosition}px)`;
                        
                        // Добавляем данные блока
                        block.dataset.level = level;
                        block.dataset.index = i;
                        block.dataset.orientation = isHorizontal ? 'horizontal' : 'vertical';
                        
                        // Добавляем обработчики событий
                        block.addEventListener('mousedown', startDrag);
                        block.addEventListener('touchstart', startDragTouch);
                        
                        gameBoard.appendChild(block);
                        blocks.push(block);
                    }
                }
                
                // Обновляем статистику
                updateStats();
            }
            
            // Начало перетаскивания (мышь)
            function startDrag(e) {
                if (!gameActive) return;
                
                selectedBlock = e.target;
                isDragging = true;
                dragStartX = e.clientX;
                dragStartY = e.clientY;
                
                // Выделяем выбранный блок
                blocks.forEach(block => block.classList.remove('selected'));
                selectedBlock.classList.add('selected');
                
                // Добавляем обработчики для перемещения и завершения перетаскивания
                document.addEventListener('mousemove', drag);
                document.addEventListener('mouseup', endDrag);
                
                e.preventDefault();
            }
            
            // Начало перетаскивания (тач)
            function startDragTouch(e) {
                if (!gameActive) return;
                
                selectedBlock = e.target;
                isDragging = true;
                dragStartX = e.touches[0].clientX;
                dragStartY = e.touches[0].clientY;
                
                // Выделяем выбранный блок
                blocks.forEach(block => block.classList.remove('selected'));
                selectedBlock.classList.add('selected');
                
                // Добавляем обработчики для перемещения и завершения перетаскивания
                document.addEventListener('touchmove', dragTouch);
                document.addEventListener('touchend', endDrag);
                
                e.preventDefault();
            }
            
            // Перетаскивание (мышь)
            function drag(e) {
                if (!isDragging || !selectedBlock) return;
                
                const deltaX = e.clientX - dragStartX;
                const deltaY = e.clientY - dragStartY;
                
                // Определяем направление вытаскивания в зависимости от ориентации блока
                const orientation = selectedBlock.dataset.orientation;
                const isTopLevel = parseInt(selectedBlock.dataset.level) === 17;
                
                if (orientation === 'horizontal') {
                    // Для горизонтальных блоков вытаскиваем вверх
                    selectedBlock.style.transform = `translateZ(${parseInt(selectedBlock.dataset.level) * BLOCK_HEIGHT}px) translateY(${-deltaY}px)`;
                } else {
                    // Для вертикальных блоков вытаскиваем вбок
                    selectedBlock.style.transform = `translateZ(${parseInt(selectedBlock.dataset.level) * BLOCK_HEIGHT}px) translateX(${deltaX}px)`;
                }
            }
            
            // Перетаскивание (тач)
            function dragTouch(e) {
                if (!isDragging || !selectedBlock) return;
                
                const deltaX = e.touches[0].clientX - dragStartX;
                const deltaY = e.touches[0].clientY - dragStartY;
                
                // Определяем направление вытаскивания в зависимости от ориентации блока
                const orientation = selectedBlock.dataset.orientation;
                
                if (orientation === 'horizontal') {
                    // Для горизонтальных блоков вытаскиваем вверх
                    selectedBlock.style.transform = `translateZ(${parseInt(selectedBlock.dataset.level) * BLOCK_HEIGHT}px) translateY(${-deltaY}px)`;
                } else {
                    // Для вертикальных блоков вытаскиваем вбок
                    selectedBlock.style.transform = `translateZ(${parseInt(selectedBlock.dataset.level) * BLOCK_HEIGHT}px) translateX(${deltaX}px)`;
                }
            }
            
            // Завершение перетаскивания
            function endDrag() {
                if (!isDragging || !selectedBlock) return;
                
                // Определяем, достаточно ли блок вытащен
                const orientation = selectedBlock.dataset.orientation;
                const computedStyle = window.getComputedStyle(selectedBlock);
                const matrix = new DOMMatrixReadOnly(computedStyle.transform);
                
                let isRemoved = false;
                
                if (orientation === 'horizontal') {
                    // Для горизонтальных блоков проверяем перемещение по Y
                    if (matrix.m42 < -30) {
                        isRemoved = true;
                    }
                } else {
                    // Для вертикальных блоков проверяем перемещение по X
                    if (Math.abs(matrix.m41) > 30) {
                        isRemoved = true;
                    }
                }
                
                if (isRemoved) {
                    // Блок успешно вытащен
                    selectedBlock.classList.add('removed');
                    selectedBlock.style.pointerEvents = 'none';
                    
                    blocksRemoved++;
                    updateStats();
                    
                    // Проверяем, не обрушилась ли башня (случайным образом)
                    if (Math.random() < 0.1 + blocksRemoved * 0.01) {
                        endGame();
                    } else {
                        // Переходим на следующий уровень после каждых 3 вытащенных блоков
                        if (blocksRemoved % 3 === 0) {
                            currentLevel++;
                            updateStats();
                        }
                    }
                } else {
                    // Блок не вытащен до конца, возвращаем на место
                    selectedBlock.style.transform = `translateZ(${parseInt(selectedBlock.dataset.level) * BLOCK_HEIGHT}px)`;
                }
                
                // Снимаем выделение
                selectedBlock.classList.remove('selected');
                
                // Убираем обработчики
                document.removeEventListener('mousemove', drag);
                document.removeEventListener('touchmove', dragTouch);
                document.removeEventListener('mouseup', endDrag);
                document.removeEventListener('touchend', endDrag);
                
                isDragging = false;
                selectedBlock = null;
            }
            
            // Обновление статистики
            function updateStats() {
                blocksRemovedElement.textContent = blocksRemoved;
                currentLevelElement.textContent = currentLevel;
            }
            
            // Начало игры
            function startGame() {
                gameActive = true;
                startButton.disabled = true;
                gameOverScreen.classList.remove('active');
            }
            
            // Конец игры
            function endGame() {
                gameActive = false;
                startButton.disabled = false;
                finalScoreElement.textContent = `Вы вытащили ${blocksRemoved} блоков`;
                gameOverScreen.classList.add('active');
            }
            
            // Сброс игры
            function resetGame() {
                gameActive = false;
                startButton.disabled = false;
                blocksRemoved = 0;
                currentLevel = 1;
                gameOverScreen.classList.remove('active');
                createTower();
            }
            
            // Обработчики кнопок
            startButton.addEventListener('click', startGame);
            resetButton.addEventListener('click', resetGame);
            restartButton.addEventListener('click', resetGame);
            
            // Инициализация игры
            createTower();
        });
    </script>
</body>
</html>
